# Generated by Django 5.2.3 on 2025-08-05 07:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChickType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('broiler', 'Broiler'), ('layer', 'Layer')], max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Farmer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farmer_name', models.CharField(max_length=100)),
                ('farmer_gender', models.CharField(choices=[('Female', 'Female'), ('Male', 'Male')], max_length=10)),
                ('farmer_nin', models.CharField(max_length=50, unique=True)),
                ('recomender_name', models.CharField(max_length=100)),
                ('recommender_nin', models.CharField(max_length=50)),
                ('farmer_phone_number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\+?\\d{10,15}$', 'Enter a valid phone number.')])),
                ('farmer_age', models.PositiveIntegerField()),
                ('farmer_type', models.CharField(choices=[('starter', 'Starter'), ('returning', 'Returning')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Userprofile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('manager', 'Manager'), ('sales_agent', 'Sales Agent')], max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\+?\\d{10,15}$', 'Enter a valid phone number.')])),
                ('title', models.CharField(blank=True, max_length=5, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user_profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chickrequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chick_quantity', models.PositiveIntegerField()),
                ('chick_date', models.DateTimeField(auto_now_add=True)),
                ('chick_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('feed_needed', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=10)),
                ('chickperiod', models.PositiveIntegerField(default=0)),
                ('chick_delivered', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='no', max_length=5)),
                ('chick_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.chicktype')),
                ('farmer_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.farmer')),
            ],
        ),
        migrations.CreateModel(
            name='Feedstock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_name', models.CharField(max_length=100)),
                ('feed_quantity', models.PositiveIntegerField(default=0)),
                ('unit_price', models.PositiveIntegerField()),
                ('cost_price', models.PositiveIntegerField()),
                ('feed_type', models.CharField(choices=[('Starter Feeds', 'Starter Feeds'), ('Grower Feeds', 'Grower Feeds')], max_length=50)),
                ('feed_brand', models.CharField(choices=[('Unga Millers (U) Ltd', 'Unga Millers (U) Ltd'), ('Ugachick Poultry Breeders Ltd', 'Ugachick Poultry Breeders Ltd'), ('Kaffiika Animal Feeds', 'Kaffiika Animal Feeds'), ('Biyinzika Poultry International Limited', 'Biyinzika Poultry International Limited')], max_length=100)),
                ('date', models.DateField(auto_now=True)),
                ('feed_supplier', models.CharField(max_length=250)),
                ('selling_price', models.PositiveIntegerField(default=0)),
                ('buying_price', models.PositiveIntegerField(default=0)),
                ('chick_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.chicktype')),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chick_breed', models.CharField(choices=[('Local', 'Local'), ('Exotic', 'Exotic')], max_length=50)),
                ('stock_name', models.CharField(max_length=200, unique=True)),
                ('quantity', models.PositiveIntegerField()),
                ('chick_price', models.PositiveIntegerField(default=1650)),
                ('register_name', models.CharField(max_length=200)),
                ('date_added', models.DateField(auto_now=True)),
                ('chick_age', models.PositiveIntegerField()),
                ('chick_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pages.chicktype')),
                ('registered_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
